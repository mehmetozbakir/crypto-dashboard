
# --- FILE: .\core\__init__.py ---




# --- FILE: .\core\data_streams.py ---

# core/data_streams.py
# ────────────────────  (yalın – sadece websocket+history görevleri)

import asyncio, json, time, requests, websockets, pandas as pd
from collections import deque

# ........................ global tamponlar
TICKS: deque = deque(maxlen=6_000)                    # (ts, price, qty, side)
CANDLES = {tf: deque(maxlen=1_500) for tf in
           ("1m", "5m", "15m", "1h", "4h", "1d")}
_WS_TASKS = []

# ........................ yardımcılar
_MINUTES = {"5m": 5, "15m": 15, "1h": 60, "4h": 240, "1d": 1_440}

def _aggregate_last(tf):
    m = _MINUTES[tf]
    chunk = list(CANDLES["1m"])[-m:]
    if len(chunk) < m:
        return
    t0, o, *_ = chunk[0]
    *_, c = chunk[-1]
    hi = max(r[2] for r in chunk)
    lo = min(r[3] for r in chunk)
    vol = sum(r[5] for r in chunk)
    CANDLES[tf].append((t0, o, hi, lo, c, vol))

def _backfill_higher_tfs():
    for tf in _MINUTES:
        CANDLES[tf].clear()
    for i in range(len(CANDLES["1m"])):
        if (i + 1) % _MINUTES["5m"]  == 0: _aggregate_last("5m")
        if (i + 1) % _MINUTES["15m"] == 0: _aggregate_last("15m")
        if (i + 1) % _MINUTES["1h"]  == 0: _aggregate_last("1h")
        if (i + 1) % _MINUTES["4h"]  == 0: _aggregate_last("4h")
        if (i + 1) % _MINUTES["1d"]  == 0: _aggregate_last("1d")

# ........................ REST geçmiş (1000 × 1 dak.)
def _fetch_history_1m(exchange, symbol):
    if exchange == "Binance":
        url = "https://fapi.binance.com/fapi/v1/klines"
        r = requests.get(url, params={"symbol":symbol, "interval":"1m", "limit":1000}, timeout=8)
        r.raise_for_status()
        rows = [(k[0]//1000, *map(float, k[1:6])) for k in r.json()]
    else:                                            # Bybit
        url = "https://api.bybit.com/v5/market/kline"
        r = requests.get(url, params={
            "category":"linear", "symbol":symbol,
            "interval":"1", "limit":1000}, timeout=8)
        r.raise_for_status()
        rows = [(int(k[0])//1000, float(k[1]), float(k[2]),
                 float(k[3]), float(k[4]), float(k[5]))
                for k in reversed(r.json()["result"]["list"])]
    CANDLES["1m"].extend(rows)

# ........................ WebSocket toplama
async def _binance_stream(sym):
    uri = f"wss://stream.binance.com/stream?streams={sym.lower()}@trade"
    async with websockets.connect(uri) as ws:
        async for msg in ws:
            d = json.loads(msg)["data"]
            TICKS.append((d["T"]//1000, float(d["p"]), float(d["q"]),
                          "sell" if d["m"] else "buy"))

async def _bybit_stream(sym):
    uri = "wss://stream.bybit.com/v5/public/linear"
    sub = json.dumps({"op":"subscribe", "args":[f"publicTrade.{sym}"]})
    async with websockets.connect(uri) as ws:
        await ws.send(sub)
        async for msg in ws:
            m = json.loads(msg)
            if m.get("topic","").startswith("publicTrade"):
                for tr in m["data"]:
                    TICKS.append((tr["T"]//1000, float(tr["p"]), float(tr["v"]),
                                   "sell" if tr["S"] == "Sell" else "buy"))

# ........................ 1-dakikalık mum üreticisi
async def _candle_worker():
    while True:
        nxt = (int(time.time()) // 60 + 1) * 60
        cur = []
        while time.time() < nxt:
            while TICKS and TICKS[0][0] < nxt:
                cur.append(TICKS.popleft())
            await asyncio.sleep(0.25)

        if cur:
            prices = [p for _, p, *_ in cur]
            vol    = sum(q for *_, q, _ in cur)
            CANDLES["1m"].append((nxt-60, prices[0], max(prices),
                                   min(prices), prices[-1], vol))
            if len(CANDLES["1m"]) > 1_500:
                CANDLES["1m"].popleft()

            for tf in _MINUTES:
                if len(CANDLES["1m"]) % _MINUTES[tf] == 0:
                    _aggregate_last(tf)

asyncio.create_task(_candle_worker())

# ........................ herkese açık API
def restart_stream(exchange, symbol):
    """REST+WS akışını sıfırla, son kapanışı anında fiyat tamponuna koy."""
    # WS’leri kes
    for t in _WS_TASKS: t.cancel()
    _WS_TASKS.clear()

    # tamponları sıfırla
    TICKS.clear()
    for dq in CANDLES.values(): dq.clear()

    # REST geçmiş + son fiyatı dummy tick olarak ekle
    _fetch_history_1m(exchange, symbol)
    if CANDLES["1m"]:
        ts, *_, close, _ = CANDLES["1m"][-1]
        TICKS.append((ts, close, 0, ""))

    _backfill_higher_tfs()

    # yeni WS görevi
    stream = _binance_stream if exchange == "Binance" else _bybit_stream
    _WS_TASKS.append(asyncio.create_task(stream(symbol)))

def df_candles(tf="1m") -> pd.DataFrame:
    raw = pd.DataFrame(list(CANDLES[tf]),
                       columns=["epoch","open","high","low","close","vol"])
    if raw.empty:
        return raw
    raw["time"] = pd.to_datetime(raw["epoch"], unit="s", utc=True)
    return raw.set_index("time")



# --- FILE: .\core\helpers_header.py ---

"""
helpers_header.py
──────────────────────────────────────────────
• CoinMarketCap (mcap / arz / hacim) + CoinGecko (ATH / ATL) başlığı
• Dışa aktardığı öğeler:
    - header_row  (Panel Row, doğrudan layout’a eklenir)
    - update_header(symbol)  → header bilgilerini yeniler
"""

import os, requests
from datetime import datetime, timedelta
import panel as pn
from dotenv import load_dotenv
load_dotenv()

# ── API Ayarları
CMC_KEY   = os.getenv("CMC_KEY", "")
CMC_URL   = "https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest"
CG_MARKET = "https://api.coingecko.com/api/v3/coins/markets"

# ── Pane’ler
left_hdr  = pn.pane.Markdown()
mid_hdr   = pn.pane.Markdown()
right_hdr = pn.pane.Markdown()
header_row = pn.Row(left_hdr, pn.Spacer(width=20),
                    mid_hdr, pn.Spacer(), right_hdr)

# ── Önbellek
_cmc_cache = {}  # {coin: (timestamp, data_dict)}

# ── Yardımcılar
def _fmt(x, dec=0, unit=""):
    return f"{x:,.{dec}f}{unit}" if x else "—"

def _base_coin(sym: str) -> str:
    return sym.replace("USDT", "").replace("USDC", "")

def _cmc_data(coin):
    from datetime import datetime
    now = datetime.utcnow()
    if coin in _cmc_cache and now - _cmc_cache[coin][0] < timedelta(seconds=60):
        return _cmc_cache[coin][1]

    hdr = {"X-CMC_PRO_API_KEY": CMC_KEY}
    for sym in (coin, coin.lstrip("0123456789")):
        r = requests.get(CMC_URL, params={"symbol": sym}, headers=hdr, timeout=8)
        if r.status_code != 200:
            continue
        payload = r.json()["data"].get(sym)
        if not payload:
            continue
        item = payload[0] if isinstance(payload, list) else payload
        q = item["quote"]["USD"]
        data = dict(
            mcap=q.get("market_cap", 0),
            total=item.get("total_supply", 0),
            circul=item.get("circulating_supply", 0),
            max=item.get("max_supply", 0),
            vol24=q.get("volume_24h", 0),
        )
        _cmc_cache[coin] = (now, data)
        return data
    raise ValueError(f"{coin} CMC’de bulunamadı")

def _cg_ath_atl(coin):
    try:
        r = requests.get(CG_MARKET, params={
            "vs_currency": "usd", "ids": coin.lower()
        }, timeout=6)
        r.raise_for_status()
        data = r.json()
        if data:
            return data[0]["ath"], data[0]["atl"]
    except Exception:
        pass
    return None, None

# ── Kamuya açık fonksiyon
def update_header(symbol: str):
    """
    symbol = 'BTCUSDT', '1000PEPEUSDT' …
    Pane içeriklerini günceller.
    """
    coin = _base_coin(symbol)
    try:
        cmc = _cmc_data(coin) if CMC_KEY else {}
    except Exception as e:
        cmc = {}
        mid_hdr.object = f"*CMC hata: {e}*"

    # CoinGecko her zaman
    ath, atl = _cg_ath_atl(coin)

    left_hdr.object = f"### **{coin}**"

    mid_hdr.object = (
        f"Piyasa Değeri: **{_fmt(cmc.get('mcap'), 0, '$')}** &nbsp;—&nbsp; "
        f"Toplam Arz: **{_fmt(cmc.get('total'))}** &nbsp;—&nbsp; "
        f"Dolaşımdaki Arz: **{_fmt(cmc.get('circul'))}** &nbsp;—&nbsp; "
        f"Maks. Arz: **{_fmt(cmc.get('max'))}** &nbsp;—&nbsp; "
        f"24 s Hacim: **{_fmt(cmc.get('vol24'), 0, '$')}**"
    )

    right_hdr.object = (
        f"Tüm Zamanların En Düşük: **{_fmt(atl, 2, '$')}**  <br>"
        f"Tüm Zamanların En Yüksek: **{_fmt(ath, 2, '$')}**"
    )



# --- FILE: .\core\lwc_history.py ---

# --- core/lwc_history.py -------------------------------------------------
"""
REST'ten (Binance / Bybit) istediğin zaman diliminde en fazla 1000 mum
çekip Lightweight Charts için dizi üretir.
˓→  get_klines(exchange, symbol, interval) → list[dict]
"""

import time, requests

INT_MAP = {"1m":"1m", "5m":"5m", "15m":"15m", "1h":"1h", "4h":"4h", "1d":"1d"}

def _binance(symbol:str, interval:str):
    url = "https://fapi.binance.com/fapi/v1/klines"
    r = requests.get(url, params={"symbol":symbol, "interval":interval,
                                  "limit":1000}, timeout=8)
    r.raise_for_status()
    return [{
        "time": k[0]//1000,
        "open": float(k[1]), "high": float(k[2]),
        "low":  float(k[3]), "close":float(k[4])
    } for k in r.json()]

def _bybit(symbol: str, interval: str):
    url = "https://api.bybit.com/v5/market/kline"      # ← tek satır değişti
    r = requests.get(url, params={
        "category": "linear",
        "symbol":   symbol,
        "interval": INT_MAP[interval],
        "limit":    1000
    }, timeout=8)
    r.raise_for_status()
    out = []
    for k in reversed(r.json()["result"]["list"]):        # old → new
        out.append({
            "time":  int(k[0]) // 1000,
            "open":  float(k[1]),
            "high":  float(k[2]),
            "low":   float(k[3]),
            "close": float(k[4])
        })
    return out

def get_klines(exchange:str, symbol:str, interval:str):
    try:
        return _binance(symbol, interval) if exchange=="Binance" else _bybit(symbol, interval)
    except Exception as e:
        print(f"[WARN] REST history fail → {e} (live WS ile devam)")
        return []



# --- FILE: .\dashboard.py ---

import sys
import pathlib
import importlib
import time
import requests
import json

import panel as pn

from core.data_streams import restart_stream, TICKS, CANDLES
from core.helpers_header import header_row, update_header
import views.chart as chart_view  # grafik modülü

# ─── TICKER TAPE CONFIGURATION ───────────────────────────────────────
TICKER_SYMBOLS = [
    {"proName": "FOREXCOM:SPXUSD", "title": "S&P 500 Index"},
    {"proName": "FOREXCOM:NSXUSD", "title": "US 100 Cash CFD"},
    {"proName": "FX_IDC:EURUSD",  "title": "EUR to USD"},
    {"proName": "BITSTAMP:BTCUSD","title": "Bitcoin"},
    {"proName": "BITSTAMP:ETHUSD","title": "Ethereum"},
]

def generate_ticker_pane(symbols):
    cfg = {
      "symbols": symbols,
      "showSymbolLogo": True,
      "isTransparent": False,
      "displayMode": "compact",
      "colorTheme": "light",
      "locale": "en"
    }
    embed = f"""
<div class="tradingview-widget-container">
  <div class="tradingview-widget-container__widget"></div>
  <script type="text/javascript"
    src="https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js"
    async>
{json.dumps(cfg, indent=2)}
  </script>
</div>
"""
    srcdoc = embed.replace("'", "&#39;").replace("\n", "")
    iframe = (
        f"<iframe srcdoc='{srcdoc}' "
        "style='width:100%;height:60px;border:none;'></iframe>"
    )
    return pn.pane.HTML(iframe, sizing_mode="stretch_width")

ticker_pane = generate_ticker_pane(TICKER_SYMBOLS)

# ─── MARKET OVERVIEW CONFIGURATION ───────────────────────────────────
MARKET_OVERVIEW_CONFIG = {
  "colorTheme": "light",
  "dateRange": "12M",
  "showChart": True,
  "locale": "en",
  "largeChartUrl": "",
  "isTransparent": False,
  "showSymbolLogo": True,
  "showFloatingTooltip": False,
  "width": "400",
  "height": "750",
  "plotLineColorGrowing": "rgba(41, 98, 255, 1)",
  "plotLineColorFalling": "rgba(41, 98, 255, 1)",
  "gridLineColor": "rgba(240, 243, 250, 0)",
  "scaleFontColor": "rgba(15, 15, 15, 1)",
  "belowLineFillColorGrowing": "rgba(41, 98, 255, 0.12)",
  "belowLineFillColorFalling": "rgba(41, 98, 255, 0.12)",
  "belowLineFillColorGrowingBottom": "rgba(41, 98, 255, 0)",
  "belowLineFillColorFallingBottom": "rgba(41, 98, 255, 0)",
  "symbolActiveColor": "rgba(41, 98, 255, 0.12)",
  "tabs": [
    {
      "title": "Indices",
      "symbols": [
        {"s": "FOREXCOM:SPXUSD", "d": "S&P 500 Index"},
        {"s": "FOREXCOM:NSXUSD", "d": "US 100 Cash CFD"},
        {"s": "FOREXCOM:DJI",    "d": "Dow Jones Industrial Average Index"},
        {"s": "INDEX:NKY",       "d": "Japan 225"},
        {"s": "INDEX:DEU40",     "d": "DAX Index"},
        {"s": "FOREXCOM:UKXGBP", "d": "FTSE 100 Index"},
        {"s": "CAPITALCOM:DXY",  "d": "dxy"},
        {"s": "NASDAQ:NDAQ",     "d": "nasdaq"},
        {"s": "TVC:VIX",         "d": "vix"},
        {"s": "CRYPTOCAP:TOTAL"},
        {"s": "CRYPTOCAP:TOTAL2"},
        {"s": "CRYPTOCAP:TOTAL3"},
        {"s": "CRYPTOCAP:OTHERS"},
        {"s": "CRYPTOCAP:TOTALE50"},
        {"s": "CRYPTOCAP:TOTALE100"},
        {"s": "CRYPTOCAP:TOTALDEFI"}
      ],
      "originalTitle": "Indices"
    },
    {
      "title": "Bybit",
      "symbols": []
    }
  ]
}

def generate_market_overview_pane(config):
    embed = f"""
<div class="tradingview-widget-container">
  <div class="tradingview-widget-container__widget"></div>
  <script type="text/javascript"
    src="https://s3.tradingview.com/external-embedding/embed-widget-market-overview.js"
    async>
{json.dumps(config, indent=2)}
  </script>
</div>
"""
    srcdoc = embed.replace("'", "&#39;").replace("\n", "")
    iframe = (
        f"<iframe srcdoc='{srcdoc}' "
        "style='width:100%;height:750px;border:none;'></iframe>"
    )
    return pn.pane.HTML(iframe, sizing_mode="fixed", width=400)

market_overview_pane = generate_market_overview_pane(MARKET_OVERVIEW_CONFIG)

# ─── PATH & EXTENSION SETUP ────────────────────────────────────────
ROOT = pathlib.Path(__file__).resolve().parent
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

pn.extension(sizing_mode="stretch_width")

# ─── SYMBOL FETCHER ────────────────────────────────────────────────
def fetch_symbols(exchange: str):
    try:
        if exchange == "Binance":
            r = requests.get("https://fapi.binance.com/fapi/v1/exchangeInfo", timeout=5)
            r.raise_for_status()
            return [s["symbol"] for s in r.json()["symbols"] if s.get("contractType")=="PERPETUAL"]
        else:
            r = requests.get(
                "https://api.bybit.com/v5/market/instruments-info?category=linear",
                timeout=5
            )
            r.raise_for_status()
            return [i["symbol"] for i in r.json()["result"]["list"] if i.get("status")=="Trading"]
    except:
        return []

# ─── LEFT PANEL WIDGETS ───────────────────────────────────────────
price_pane  = pn.pane.Markdown("**0.00**", styles={"font-size":"24pt","text-align":"center"})
close_pane  = pn.pane.Markdown("*Kapanış ?*", styles={"font-size":"16pt","text-align":"center"})
delta_pane  = pn.pane.Markdown("", styles={"font-size":"14pt","text-align":"center"})

exch_dd  = pn.widgets.Select(name="Exchange",
             options=["Binance","Bybit"], value="Binance", width=150)
sym_dd   = pn.widgets.Select(name="Symbol",
             options=fetch_symbols("Binance"), value="BTCUSDT", width=150)
analyze_btn = pn.widgets.Button(name="Analiz Yap",
                button_type="success", width=150)

# ─── PRICE UPDATER ────────────────────────────────────────────────
UTC_OFFSET = 3 * 3600  # +03:00
def _update_prices():
    if not TICKS:
        return
    live = TICKS[-1][1]
    daily = next(
        (c[4] for c in CANDLES["1m"]
         if time.gmtime(c[0] + UTC_OFFSET).tm_hour==0 and time.gmtime(c[0] + UTC_OFFSET).tm_min==0),
        live
    )
    price_pane.object = f"**{live:,.2f}**"
    close_pane.object = f"*Kapanış {daily:,.2f}*"
    pct   = (live - daily)/daily*100 if daily else 0
    color = "#29cf82" if pct>=0 else "#ef5350"
    sign  = "+" if pct>=0 else ""
    delta_pane.object = f"<span style='color:{color}'>{sign}{pct:,.2f}%</span>"

pn.state.add_periodic_callback(_update_prices, 200)

# ─── PANEL YÜKLEYİCİ ─────────────────────────────────────────────
def load_panel(name: str):
    if name == "Chart":
        return chart_view.panel()
    module_name = name.lower().replace(" ", "")
    try:
        mod = importlib.import_module(f"views.{module_name}")
        return mod.panel()
    except ModuleNotFoundError:
        return pn.pane.Markdown(f"**{name} view is not available.**", styles={"color":"red"})

MENU = [
    "Chart","Order Book","Heatmap","Order Flow",
    "Liquidations","Open Interest","Funding rate",
    "Crypto Coins Heatmap","Stock Heatmap Widget"
]
tabs = pn.Tabs(*( (n, load_panel(n)) for n in MENU ), active=0, sizing_mode="stretch_both")

# ─── CALLBACKS ─────────────────────────────────────────────────────
def _refresh():
    restart_stream(exch_dd.value, sym_dd.value)
    update_header(sym_dd.value)
    if hasattr(chart_view, "update_chart"):
        chart_view.update_chart(exch_dd.value, sym_dd.value)

def _on_exchange(evt):
    new_opts = fetch_symbols(evt.new)
    sym_dd.options = new_opts
    if new_opts:
        sym_dd.value = new_opts[0]
    _refresh()

exch_dd.param.watch(_on_exchange, "value")
sym_dd.param.watch(lambda e: _refresh(), "value")

# ─── LAYOUT & SERVE ───────────────────────────────────────────────
left_panel = pn.Column(
    price_pane, close_pane, delta_pane,
    exch_dd, sym_dd,
    pn.Spacer(height=10), analyze_btn,
    width=200
)

layout = pn.Column(
    ticker_pane,
    header_row,
    pn.Row(left_panel, tabs, market_overview_pane, sizing_mode="stretch_width")
)

layout.servable(title="Kripto Analiz Tahtası")

# ─── İLK ÇAĞRI ────────────────────────────────────────────────────
_refresh()



# --- FILE: .\views\__init__.py ---




# --- FILE: .\views\chart.py ---

# views/chart.py

import panel as pn

pn.extension()

def panel():
    html = """
    <iframe
      src="/public/lightweight_chart.html"
      sandbox="allow-scripts allow-same-origin"
      width="100%" height="600"
      style="border:none;"
    ></iframe>
    """
    return pn.pane.HTML(html, sizing_mode="stretch_width", height=600)



# --- FILE: .\views\cryptocoinsheatmap.py ---

import panel as pn

pn.extension()

def panel():
    html = (
        '<iframe src="/public/crypto_heatmap.html" '
        'style="width:100%;height:700px;border:none;"></iframe>'
    )
    return pn.pane.HTML(html, sizing_mode="stretch_width", height=700)



# --- FILE: .\views\stockheatmapwidget.py ---

import panel as pn

pn.extension()

def panel():
    html = (
        '<iframe src="/public/stock_heatmap.html" '
        'style="width:100%;height:700px;border:none;"></iframe>'
    )
    return pn.pane.HTML(html, sizing_mode="stretch_width", height=700)


